// AUTOGENERATED FROM https://github.com/vuejs/eslint-plugin-vue/blob/1ce68fa9def2c7d6da7aa5020c731860d7027459/tests/lib/rules/comment-directive.js
/**
 * @fileoverview Tests for comment-directive rule.
 * @author Toru Nagashima
 */

'use strict'

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

const assert = require('assert')
const { ESLint } = require('../../../eslint-plugin-vue/tests/eslint-compat')

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

// Initialize linter.
const eslint = new ESLint({
  overrideConfig: {
    files: ['*.*'],
    languageOptions: {
      parser: require('vue-eslint-parser'),
      ecmaVersion: 2015,
      parserOptions: {
        ecmaVersion: 2015,
        templateTokenizer: { pug: 'vue-eslint-parser-template-tokenizer-pug' }
      },
    },
    plugins: { vue: require('../../../eslint-plugin-vue/lib/index')},
    rules: {
      'no-unused-vars': 'error',
      'vue/comment-directive': 'error',
      'vue/no-parsing-error': 'error',
      'vue/no-duplicate-attributes': 'error'
    },
    processor: require('../../../eslint-plugin-vue/lib/processor')
  },
})

describe('comment-directive', () => {
  describe('eslint-disable/eslint-enable', () => {
    it('disable all rules if // eslint-disable', async () => {
      const code = `<template lang="pug">
//- eslint-disable
div(id, id="a") Hello
</template>`
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })

    it('disable specific rules if // eslint-disable vue/no-duplicate-attributes', async () => {
      const code = `<template lang="pug">
//- eslint-disable vue/no-duplicate-attributes
div(id, id='a') Hello
</template>`
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages
      assert.deepEqual(messages.length, 1)
      assert.deepEqual(messages[0].ruleId, 'vue/html-quotes')
    })

    it('enable all rules if // eslint-enable', async () => {
      const code = `<template lang="pug">
//- eslint-disable
div(id, id='a') Hello
//- eslint-enable
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 2)
      assert.deepEqual(messages[0].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[0].line, 5)
      assert.deepEqual(messages[1].ruleId, 'vue/html-quotes')
      assert.deepEqual(messages[1].line, 5)
    })

    it('enable specific rules if // eslint-enable vue/no-duplicate-attributes', async () => {
      const code = `<template lang="pug">
// eslint-disable vue/html-quotes, vue/no-duplicate-attributes
div(id, id='a') Hello
// eslint-enable vue/no-duplicate-attributes
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 1)
      assert.deepEqual(messages[0].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[0].line, 5)
    })

    it('should not affect to the code in <script>.', async () => {
      const code = `<template lang="pug">
// eslint-disable
div(id, id='a') Hello
</template>
<script>
var a
</script>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.strictEqual(messages.length, 1)
      assert.strictEqual(messages[0].ruleId, 'no-unused-vars')
    })

    it('disable specific rules if // eslint-disable vue/no-duplicate-attributes ,, , vue/html-quotes', async () => {
      const code = `<template lang="pug">
// eslint-disable vue/no-duplicate-attributes ,, , vue/html-quotes
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })
  })

  // no inline comments in pug
  //   describe('eslint-disable-line', () => {
  //     it('disable all rules if // eslint-disable-line', async () => {
  //       const code = `<template lang="pug">
  // div(id, id='a') Hello // eslint-disable-line
  // </template>
  //       `
  //       const messages = (
  //         await eslint.lintText(code, { filePath: 'test.vue' })
  //       )[0].messages

  //       assert.deepEqual(messages.length, 0)
  //     })

  //     it('disable specific rules if // eslint-disable-line vue/no-duplicate-attributes', async () => {
  //       const code = `<template lang="pug">
  // div(id, id='a') Hello // eslint-disable-line vue/no-duplicate-attributes
  // </template>
  //       `
  //       const messages = (
  //         await eslint.lintText(code, { filePath: 'test.vue' })
  //       )[0].messages

  //       assert.deepEqual(messages.length, 1)
  //       assert.deepEqual(messages[0].ruleId, 'vue/html-quotes')
  //     })

  //     it("don't disable rules if // eslint-disable-line is on another line", async () => {
  //       const code = `<template lang="pug">
  // // eslint-disable-line
  // div(id, id='a') Hello
  // // eslint-disable-line
  // </template>
  //       `
  //       const messages = (
  //         await eslint.lintText(code, { filePath: 'test.vue' })
  //       )[0].messages

  //       assert.deepEqual(messages.length, 2)
  //       assert.deepEqual(messages[0].ruleId, 'vue/html-quotes')
  //       assert.deepEqual(messages[1].ruleId, 'vue/no-duplicate-attributes')
  //     })
  //   })

  describe('eslint-disable-next-line', () => {
    it('disable all rules if // eslint-disable-next-line', async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })

    it('disable specific rules if // eslint-disable-next-line vue/no-duplicate-attributes', async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line vue/no-duplicate-attributes
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 1)
      assert.deepEqual(messages[0].ruleId, 'vue/html-quotes')
    })

    it("don't disable rules if // eslint-disable-next-line is on another line", async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line

div(id, id='a') Hello // eslint-disable-next-line
// eslint-disable-next-line
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 2)
      assert.deepEqual(messages[0].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[1].ruleId, 'vue/html-quotes')
    })

    it('should affect only the next line', async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line vue/html-quotes, vue/no-duplicate-attributes
div(id, id='a') Hello
div(id, id='a') Hello
</template>
      `

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 2)
      assert.deepEqual(messages[0].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[0].line, 4)
      assert.deepEqual(messages[1].ruleId, 'vue/html-quotes')
      assert.deepEqual(messages[1].line, 4)
    })
  })

  describe('allow description', () => {
    it('disable all rules if // eslint-disable -- description', async () => {
      const code = `<template lang="pug">
// eslint-disable -- description
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })

    it('enable all rules if // eslint-enable -- description', async () => {
      const code = `<template lang="pug">
// eslint-disable -- description
div(id, id='a') Hello
// eslint-enable -- description
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 2)
      assert.deepEqual(messages[0].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[0].line, 5)
      assert.deepEqual(messages[1].ruleId, 'vue/html-quotes')
      assert.deepEqual(messages[1].line, 5)
    })

    it('enable specific rules if // eslint-enable vue/no-duplicate-attributes -- description', async () => {
      const code = `<template lang="pug">
// eslint-disable vue/html-quotes, vue/no-duplicate-attributes -- description
div(id, id='a') Hello
// eslint-enable vue/no-duplicate-attributes -- description
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 1)
      assert.deepEqual(messages[0].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[0].line, 5)
    })

    //     it('disable all rules if // eslint-disable-line -- description', async () => {
    //       const code = `<template lang="pug">
    // div(id, id='a') Hello // eslint-disable-line -- description
    // </template>
    //       `
    //       const messages = (
    //         await eslint.lintText(code, { filePath: 'test.vue' })
    //       )[0].messages

    //       assert.deepEqual(messages.length, 0)
    //     })

    //     it('disable specific rules if // eslint-disable-line vue/no-duplicate-attributes -- description', async () => {
    //       const code = `<template lang="pug">
    // div(id, id='a') Hello // eslint-disable-line vue/no-duplicate-attributes -- description
    // </template>
    //       `
    //       const messages = (
    //         await eslint.lintText(code, { filePath: 'test.vue' })
    //       )[0].messages

    //       assert.deepEqual(messages.length, 1)
    //       assert.deepEqual(messages[0].ruleId, 'vue/html-quotes')
    //     })

    it('disable all rules if // eslint-disable-next-line -- description', async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line -- description
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })

    it('disable specific rules if // eslint-disable-next-line vue/no-duplicate-attributes', async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line vue/no-duplicate-attributes -- description
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 1)
      assert.deepEqual(messages[0].ruleId, 'vue/html-quotes')
    })
  })

  describe('block level directive', () => {
    it('disable all rules if // eslint-disable', async () => {
      const code = `
<!-- eslint-disable -->
<template lang="pug">
div(id, id='a') Hello
</template>
      `
      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })

    it("don't disable rules if // eslint-disable is on after block", async () => {
      const code = `
<!-- eslint-disable -->
<i18n>
</i18n>
<template lang="pug">
div(id, id='a') Hello
</template>
      `

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 2)
      assert.deepEqual(messages[0].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[1].ruleId, 'vue/html-quotes')
    })
  })

  describe('reportUnusedDisableDirectives', () => {
    const eslint = new ESLint({
      overrideConfig: {
        files: ['*.*'],
        languageOptions: {
          parser: require('vue-eslint-parser'),
          ecmaVersion: 2015,
          parserOptions: {
            ecmaVersion: 2015,
            templateTokenizer: { pug: 'vue-eslint-parser-template-tokenizer-pug' }
          },
        },
        plugins: { vue: require('../../../eslint-plugin-vue/lib/index')},
        rules: {
          'no-unused-vars': 'error',
          'vue/comment-directive': [
            'error',
            { reportUnusedDisableDirectives: true }
          ],
          'vue/html-quotes': 'error',
          'vue/no-duplicate-attributes': 'error'
        },
        processor: require('../../../eslint-plugin-vue/lib/processor')
      },
    })
    it('report unused // eslint-disable', async () => {
      const code = `
<template lang="pug">
// eslint-disable
#a Hello
</template>`

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 1)
      assert.deepEqual(messages[0].ruleId, 'vue/comment-directive')
      assert.deepEqual(
        messages[0].message,
        'Unused eslint-disable directive (no problems were reported).'
      )
      assert.deepEqual(messages[0].line, 3)
      assert.deepEqual(messages[0].column, 1)
    })

    it('dont report unused // eslint-disable', async () => {
      const code = `<template lang="pug">
// eslint-disable
div(id, id='a') Hello
</template>
      `

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })
    it('disable and report unused // eslint-disable', async () => {
      const code = `<template lang="pug">
// eslint-disable
div(id, id='a') Hello
// eslint-enable
// eslint-disable
div(id="b") Hello
</template>
      `

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 1)
      assert.deepEqual(messages[0].ruleId, 'vue/comment-directive')
      assert.deepEqual(
        messages[0].message,
        'Unused eslint-disable directive (no problems were reported).'
      )
      assert.deepEqual(messages[0].line, 5)
      assert.deepEqual(messages[0].column, 1)
    })

    it('report unused // eslint-disable vue/no-duplicate-attributes, vue/html-quotes', async () => {
      const code = `<template lang="pug">
// eslint-disable vue/no-duplicate-attributes, vue/html-quotes
#a Hello
</template>`

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 2)

      assert.deepEqual(messages[0].ruleId, 'vue/comment-directive')
      assert.deepEqual(
        messages[0].message,
        "Unused eslint-disable directive (no problems were reported from 'vue/no-duplicate-attributes')."
      )
      assert.deepEqual(messages[0].line, 2)
      assert.deepEqual(messages[0].column, 21)

      assert.deepEqual(messages[1].ruleId, 'vue/comment-directive')
      assert.deepEqual(
        messages[1].message,
        "Unused eslint-disable directive (no problems were reported from 'vue/html-quotes')."
      )
      assert.deepEqual(messages[1].line, 2)
      assert.deepEqual(messages[1].column, 50)
    })

    it('report unused // eslint-disable-next-line vue/no-duplicate-attributes, vue/html-quotes', async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line vue/no-duplicate-attributes, vue/html-quotes
div(id="a") Hello
div(id, id='b') Hello
</template>`

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 4)

      assert.deepEqual(messages[0].ruleId, 'vue/comment-directive')
      assert.deepEqual(
        messages[0].message,
        "Unused eslint-disable-next-line directive (no problems were reported from 'vue/no-duplicate-attributes')."
      )
      assert.deepEqual(messages[0].line, 2)
      assert.deepEqual(messages[0].column, 31)

      assert.deepEqual(messages[1].ruleId, 'vue/comment-directive')
      assert.deepEqual(
        messages[1].message,
        "Unused eslint-disable-next-line directive (no problems were reported from 'vue/html-quotes')."
      )
      assert.deepEqual(messages[1].line, 2)
      assert.deepEqual(messages[1].column, 60)

      assert.deepEqual(messages[2].ruleId, 'vue/no-duplicate-attributes')
      assert.deepEqual(messages[2].line, 4)
      assert.deepEqual(messages[3].ruleId, 'vue/html-quotes')
      assert.deepEqual(messages[3].line, 4)
    })

    it('dont report used // eslint-disable-next-line vue/no-duplicate-attributes, vue/html-quotes', async () => {
      const code = `<template lang="pug">
// eslint-disable-next-line vue/no-duplicate-attributes, vue/html-quotes
div(id, id='a') Hello
</template>`

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })

    it('dont report used, with duplicate eslint-disable', async () => {
      const code = `<template lang="pug">
// eslint-disable
// eslint-disable-next-line vue/no-duplicate-attributes, vue/html-quotes
div(id, id='a') Hello// eslint-disable-line vue/no-duplicate-attributes, vue/html-quotes
</template>`

      const messages = (
        await eslint.lintText(code, { filePath: 'test.vue' })
      )[0].messages

      assert.deepEqual(messages.length, 0)
    })
  })
})
