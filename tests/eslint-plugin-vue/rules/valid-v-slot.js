// AUTOGENERATED FROM https://github.com/vuejs/eslint-plugin-vue/blob/1ce68fa9def2c7d6da7aa5020c731860d7027459/tests/lib/rules/valid-v-slot.js
/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
'use strict'

// ------------------------------------------------------------------------------
// Requirements
// ------------------------------------------------------------------------------

const RuleTester = require('eslint').RuleTester
const rule = require('../../../eslint-plugin-vue/lib/rules/valid-v-slot')

// ------------------------------------------------------------------------------
// Tests
// ------------------------------------------------------------------------------

const tester = new RuleTester({
  languageOptions: {
    parser: require('vue-eslint-parser'),
    ecmaVersion: 2015,
    parserOptions: {
      templateTokenizer: { pug: 'vue-eslint-parser-template-tokenizer-pug' }
    }
  }
})

tester.run('valid-v-slot', rule, {
  valid: [
    `<template lang="pug">MyComponent(v-slot="{data}") {{data}}</template>`,
    `<template lang="pug">MyComponent(v-slot:default="{data}") {{data}}</template>`,
    `<template lang="pug">MyComponent(#default="{data}") {{data}}</template>`,
    `<template lang="pug">
MyComponent
  template(v-slot) default
</template>`,
    `<template lang="pug">
MyComponent
  template(#default) default
</template>`,
    `<template lang="pug">
MyComponent
  template(#named) named
</template>`,
    `<template lang="pug">
MyComponent
  template(#default) default
  template(#named) named
</template>`,
    `<template lang="pug">
MyComponent
  template(#one) one
  template(#two) two
</template>`,
    `<template lang="pug">
MyComponent
  template(#one) one
  template(#two) two
  template(#[one]) one
  template(#[two]) two
</template>`,
    `<template lang="pug">
MyComponent
  template(v-if="condition", #one) foo
  template(v-else, #one) bar
</template>`,
    `<template lang="pug">
MyComponent
  template(v-if="c1", #one) foo
  template(v-else-if="c2", #one) bar
  template(v-else, #one) baz
</template>`,
    `<template lang="pug">
MyComponent
  template(v-for="(key, value) in xxxx", #[key]) {{value}}
</template>`,
    `<template lang="pug">
MyComponent
  template(v-for="(key, value) in xxxx", #[key]) {{value}}
  template(v-for="(key, value) in yyyy", #[key]) {{value}}
</template>`,
    `<template lang="pug">
MyComponent
  template(#[key]) {{value}}
  template(v-for="(key, value) in yyyy", #[key]) {{value}}
</template>`,
    `<template lang="pug">
MyComponent
  template(v-for="(value, key) in xxxx", #[key]) {{value}}
  template(v-for="(key, value) in xxxx", #[key]) {{value}}
</template>`,
    `<template lang="pug">
MyComponent
  template(v-for="(key) in xxxx", #[key+value]) {{value}}
  template(v-for="(key, value) in xxxx", #[key+value]) {{value}}
</template>`,
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:foo.bar)
</template>`,
      options: [{ allowModifiers: true }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:foo)
  template(v-slot:foo.bar)
  template(v-slot:foo.baz)
  template(v-slot:foo.bar.baz)
</template>`,
      options: [{ allowModifiers: true }]
    },
    // svg
    {
      code: `
      <template lang="pug">
svg
  MyComponent(v-slot="slotProps")
    MyChildComponent(:thing="slotProps.thing")
</template>`
    },
    // parsing error
    {
      filename: 'parsing-error.vue',
      code: `<template lang="pug">
MyComponent(v-slot=".")
  div
</template>`
    }
  ],
  invalid: [
    // Verify location.
    {
      code: `
        <template lang="pug">div(v-slot="{data}") {{data}}</template>`,
      errors: [{ messageId: 'ownerMustBeCustomElement', data: { name: 'div' } }]
    },
    {
      code: `
        <template lang="pug">template(v-slot:named)</template>`,
      errors: [
        { messageId: 'ownerMustBeCustomElement', data: { name: 'template' } }
      ]
    },
    {
      code: `
        <template lang="pug">div(v-slot:named="{data}") {{data}}</template>`,
      errors: [
        { messageId: 'ownerMustBeCustomElement', data: { name: 'div' } },
        { messageId: 'namedSlotMustBeOnTemplate' }
      ]
    },
    {
      code: `
        <template lang="pug">
div
  template(v-slot)
</template>`,
      errors: [{ messageId: 'ownerMustBeCustomElement', data: { name: 'div' } }]
    },
    {
      code: `
        <template lang="pug">MyComponent(v-slot:named="{data}") {{data}}</template>`,
      errors: [{ messageId: 'namedSlotMustBeOnTemplate' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent(v-slot="{data}") {{data}}

  template(#named)
</template>`,
      errors: [{ messageId: 'defaultSlotMustBeOnTemplate' }]
    },

    // Verify duplication.
    {
      code: `
        <template lang="pug">MyComponent(v-slot="{data}", v-slot:one) {{data}}</template>`,
      errors: [
        { messageId: 'namedSlotMustBeOnTemplate' },
        { messageId: 'disallowDuplicateSlotsOnElement' }
      ]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:one, v-slot:two)
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnElement' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:one) 1st
  template(v-slot:one) 2nd
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:[one]) 1st
  template(v-slot:[one]) 2nd
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot) 1st
  template(v-slot) 2nd
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot) 1st
  template(v-slot:default) 2nd
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-if="c1", v-slot:one) 1st
  template(v-slot:one) 2nd
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-if="c1", v-slot:one) 1st
  template(v-else, v-slot:one) 2st
  template(v-slot:one) 3rd
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-for="(key, value) in definition", v-slot:one) {{value}}
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-for="(key, value) in definition", v-slot:[one]) {{value}}
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-for="(key, value) in xxxx", v-slot:key) {{value}}
  template(v-for="(key, value) in yyyy", v-slot:key) {{value}}
</template>`,
      errors: [
        { messageId: 'disallowDuplicateSlotsOnChildren' },
        { messageId: 'disallowDuplicateSlotsOnChildren' },
        { messageId: 'disallowDuplicateSlotsOnChildren' }
      ]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-for="(key, value) in xxxx", v-slot:[key]) {{value}}
  template(v-for="(key, value) in xxxx", v-slot:[key]) {{value}}
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-for="(key) in xxxx", v-slot:[key]) {{value}}
  template(v-for="(key, value) in xxxx", v-slot:[key]) {{value}}
</template>`,
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:foo.bar)
  template(v-slot:foo.bar)
</template>`,
      options: [{ allowModifiers: true }],
      errors: [{ messageId: 'disallowDuplicateSlotsOnChildren' }]
    },

    // Verify arguments.
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:[data]="{data}")
</template>`,
      errors: [{ messageId: 'disallowArgumentUseSlotParams' }]
    },

    // Verify modifiers.
    {
      code: `
        <template lang="pug">MyComponent(v-slot.foo="{data}") {{data}}</template>`,
      errors: [{ messageId: 'disallowAnyModifier' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot.foo)
</template>`,
      errors: [{ messageId: 'disallowAnyModifier' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:foo.bar)
</template>`,
      errors: [{ messageId: 'disallowAnyModifier' }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot.foo)
</template>`,
      errors: [{ messageId: 'disallowAnyModifier' }],
      options: [{ allowModifiers: true }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:foo.bar)
</template>`,
      errors: [{ messageId: 'disallowAnyModifier' }],
      options: [{ allowModifiers: false }]
    },
    {
      code: `
        <template lang="pug">
MyComponent
  template(v-slot:foo)
  template(v-slot:foo.bar)
  template(v-slot:foo.baz)
  template(v-slot:foo.bar.baz)
</template>`,
      options: [{ allowModifiers: false }],
      errors: [
        { messageId: 'disallowAnyModifier' },
        { messageId: 'disallowAnyModifier' },
        { messageId: 'disallowAnyModifier' }
      ]
    },

    // Verify value.
    {
      code: `
        <template lang="pug">MyComponent(v-slot) content</template>`,
      errors: [{ messageId: 'requireAttributeValue' }]
    },
    // comment value
    {
      filename: 'comment-value1.vue',
      code: `<template lang="pug">
MyComponent(v-slot="/**/")
  div
</template>`,
      errors: [{ messageId: 'requireAttributeValue' }]
    },
    // empty value
    {
      filename: 'empty-value.vue',
      code: `<template lang="pug">
MyComponent(v-slot="")
  div
</template>`,
      errors: [{ messageId: 'requireAttributeValue' }]
    }
  ]
})
